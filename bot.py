import os
import asyncio


from telegram import (
    Update, 
    ReplyKeyboardMarkup, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from telegram.ext import (
    ApplicationBuilder, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler, 
    ContextTypes, 
    filters
)
from config import TELEGRAM_BOT_TOKEN
from generator import generate_coloring_image


# START
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –¶–µ –±–æ—Ç, —è–∫–∏–π —Å—Ç–≤–æ—Ä—é—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏ –¥–ª—è –¥—ñ—Ç–µ–π üñçÔ∏è\n\n"
        "üìå –Ø–∫ —Ü–µ –ø—Ä–∞—Ü—é—î?\n"
        "1. –û–±–µ—Ä–∏ –≤—ñ–∫ –¥–∏—Ç–∏–Ω–∏ ‚Äî –º–∏ –ø—ñ–¥–±–µ—Ä–µ–º–æ —Å–∫–ª–∞–¥–Ω—ñ—Å—Ç—å\n"
        "2. –û–±–µ—Ä–∏ —Ç–µ–º—É ‚Äî –º—É–ª—å—Ç–∏–∫–∏, —Ç–≤–∞—Ä–∏–Ω–∏, –º–∞—à–∏–Ω–∫–∏ —Ç–æ—â–æ\n"
        "3. –í–∫–∞–∂–∏ —Ñ–æ—Ä–º–∞—Ç —ñ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å\n"
        "4. –û—Ç—Ä–∏–º–∞–π —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ A4 –∞–±–æ A5\n\n"
        "‚¨áÔ∏è –û–±–µ—Ä–∏ –≤—ñ–∫:"
    )
    keyboard = [["2-3 —Ä–æ–∫–∏", "4 —Ä–æ–∫–∏"], ["5 —Ä–æ–∫—ñ–≤", "6 —Ä–æ–∫—ñ–≤"]]
    await update.message.reply_text(
        "–í—ñ–∫ –¥–∏—Ç–∏–Ω–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )

# –û–ë–†–û–ë–ö–ê –í–Ü–ö–£
async def handle_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    age = update.message.text
    context.user_data["age"] = age

    keyboard = [["–î—ñ—Å–Ω–µ–π", "–¢–≤–∞—Ä–∏–Ω–∏"], ["–ú–∞—à–∏–Ω–∫–∏", "–î–∏–Ω–æ–∑–∞–≤—Ä–∏"], ["–ö–∞–∑–∫–æ–≤—ñ", "–á–∂–∞"]]
    await update.message.reply_text(
        f"‚úÖ –í—ñ–∫ –æ–±—Ä–∞–Ω–æ: {age}\n‚¨áÔ∏è –¢–µ–ø–µ—Ä –æ–±–µ—Ä–∏ —Ç–µ–º–∞—Ç–∏–∫—É —Ä–æ–∑–º–∞–ª—å–æ–≤–æ–∫:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )

# –û–ë–†–û–ë–ö–ê –¢–ï–ú–ò
async def handle_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
   

    topic = update.message.text
    context.user_data["topic"] = topic

    keyboard = [["1", "3", "5"], ["10"]]
    await update.message.reply_text(
        f"‚úÖ –¢–µ–º–∞—Ç–∏–∫–∞ –æ–±—Ä–∞–Ω–∞: {topic}\n‚¨áÔ∏è –û–±–µ—Ä–∏, —Å–∫—ñ–ª—å–∫–∏ —Ä–æ–∑–º–∞–ª—å–æ–≤–æ–∫ —Ö–æ—á–µ—à –æ—Ç—Ä–∏–º–∞—Ç–∏:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )
async def handle_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    amount = update.message.text
    context.user_data["amount"] = amount

    keyboard = [["A4", "A5"]]
    await update.message.reply_text(
        f"‚úÖ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∑–æ–±—Ä–∞–∂–µ–Ω—å: {amount}\n‚¨áÔ∏è –û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –ª–∏—Å—Ç–∞:",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    )

async def handle_format(update: Update, context: ContextTypes.DEFAULT_TYPE):
    page_format = update.message.text
    context.user_data["format"] = page_format

    age = context.user_data.get("age")
    topic = context.user_data.get("topic")
    amount = int(context.user_data.get("amount"))
    user_id = update.effective_chat.id

    await update.message.reply_text("üîß –ì–µ–Ω–µ—Ä—É—é —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏, –±—É–¥—å –ª–∞—Å–∫–∞ –∑–∞—á–µ–∫–∞–π...")

    for i in range(amount):
        prompt = f"{topic} for children {age}"
        image_url = generate_coloring_image(prompt)

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("üëç –ü–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"like|{image_url}"),
                InlineKeyboardButton("üëé –ù–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è", callback_data=f"dislike|{image_url}")
            ]
        ])

        try:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=image_url,
                caption=f"üñº –†–æ–∑–º–∞–ª—å–æ–≤–∫–∞ {i+1} —ñ–∑ {amount}",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"[–ü–û–ú–ò–õ–ö–ê –ø—Ä–∏ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—ñ —Ñ–æ—Ç–æ]: {e}")
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –≤–∏–±–µ—Ä—ñ—Ç—å –º–µ–Ω—à—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å."
            )

    await update.message.reply_text("‚úÖ –£—Å—ñ —Ä–æ–∑–º–∞–ª—å–æ–≤–∫–∏ –Ω–∞–¥—ñ—Å–ª–∞–Ω—ñ! –î—è–∫—É—î–º–æ –∑–∞ –æ—Ü—ñ–Ω–∫–∏ üôè")

async def handle_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    action, image_url = query.data.split("|")
    user = query.from_user

    # –¢—É—Ç –º–æ–∂–Ω–∞ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –≤ –±–∞–∑—É –∞–±–æ —Ñ–∞–π–ª
    print(f"[–û–¶–Ü–ù–ö–ê] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {user.id} –æ—Ü—ñ–Ω–∏–≤ {image_url} —è–∫ {action}")

    await query.edit_message_caption(
        caption=f"{query.message.caption}\n\n‚úÖ –í–∏ –æ—Ü—ñ–Ω–∏–ª–∏: {'üëç' if action == 'like' else 'üëé'}"
    )


# MAIN
async def main():
    app = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Regex("^(2-3 —Ä–æ–∫–∏|4 —Ä–æ–∫–∏|5 —Ä–æ–∫—ñ–≤|6 —Ä–æ–∫—ñ–≤)$"), handle_age))
    app.add_handler(MessageHandler(filters.Regex("^(–î—ñ—Å–Ω–µ–π|–¢–≤–∞—Ä–∏–Ω–∏|–ú–∞—à–∏–Ω–∫–∏|–î–∏–Ω–æ–∑–∞–≤—Ä–∏|–ö–∞–∑–∫–æ–≤—ñ|–á–∂–∞)$"), handle_topic))
    app.add_handler(MessageHandler(filters.Regex("^(1|3|5|10)$"), handle_amount))
    app.add_handler(MessageHandler(filters.Regex("^(A4|A5)$"), handle_format))
    app.add_handler(CallbackQueryHandler(handle_rating))

    await app.bot.delete_webhook(drop_pending_updates=True)

    PORT = int(os.environ.get("PORT", 8443))
    HOST = "0.0.0.0"
    PATH = "webhook"
    BASE_URL = os.environ.get("RENDER_EXTERNAL_URL")

    await app.run_webhook(
        listen=HOST,
        port=PORT,
        url_path=PATH,
        webhook_url=f"{BASE_URL}/{PATH}"
    )

if __name__ == "__main__":
    asyncio.run(main())
